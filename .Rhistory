# Step 1: Download GEO Dataset
# Fetch GEO dataset (example accession: "GSE21942")
geo_data <- getGEO("GSE21942", GSEMatrix = TRUE, destdir = "./data")
library(tidyverse)
library(DESeq2)         # For differential expression analysis
library(GEOquery)       # For fetching GEO datasets
library(org.Hs.eg.db)   # Annotation database for Homo sapiens
library(hgu133plus2.db) # Affymetrix probe annotation for hgu133plus2 arrays
library(dplyr)          # For data manipulation
# Step 1: Download GEO Dataset
# Fetch GEO dataset (example accession: "GSE21942")
geo_data <- getGEO("GSE21942", GSEMatrix = TRUE, destdir = "./data")
# Step 2: Extract Expression Data
# Extract count data (genes x samples)
read.delim("data/GSE21942_series_matrix.txt.gz")
# Step 2: Extract Expression Data
# Extract count data (genes x samples)
raw_counts <- read.delim("data/GSE21942_series_matrix.txt.gz")
View(raw_counts)
# Extract sample metadata
col_data <- pData(geo_data[[1]])
View(col_data)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
geo_data <- getGEO("GSE240854", GSEMatrix = TRUE, destdir = "./data")
geo_data
# Step 2: Extract Expression Data
# Extract count data (genes x samples)
counts_data <- exprs(geo_data[[1]])
# Extract sample metadata
col_data <- pData(geo_data[[1]])
View(col_data)
geo_data <- getGEO("GSE21942", GSEMatrix = TRUE, destdir = "./data")
geo_data
# Step 2: Extract Expression Data
# Extract count data (genes x samples)
counts_data <- exprs(geo_data[[1]])
# Extract sample metadata
col_data <- pData(geo_data[[1]])
col_data$condition <- c(rep("Control", 15), rep("MS", 14))
col_data$condition <- as.factor(col_data$condition)
# Verify that sample names match between count data and metadata
all(colnames(counts_data) == rownames(col_data))
vst(dds)
View(counts_data)
dds <- DESeqDataSetFromMatrix(
countData = round(counts_data),
colData = col_data,
design = ~ condition
)
# Run DESeq2 pipeline
dds <- DESeq(dds)
# Extract results with adjusted p-value threshold (alpha = 0.05)
res <- results(dds)
res_df <- as.data.frame(res)
# Step 4: Gene Annotation
# Check available keytypes
keytypes(hgu133plus2.db)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
View(res_df)
head(res_df)
# Pre-filtering: remove rows with low gene counts
rowSums(counts(dds))
# Pre-filtering: remove rows with low gene counts
rowSums(counts(dds)) >= 10
# Pre-filtering: remove rows with low gene counts
keep <- rowSums(counts(dds)) >= 10
dds <- dds[rowSums(counts(dds)) >= 10]
dds
rowSums(counts(dds))
# Set the factor level
revel(dds$condition, ref = "control")
library(tidyverse)      # For data manipulation
# Set the factor level
relevel(dds$condition, ref = "control")
# Set the factor level
relevel(dds$condition, ref = "Control")
# Set the factor level
dds$condition <- relevel(dds$condition, ref = "Control")
dds$condition
# Run DESeq2 pipeline
dds <- DESeq(dds)
# Extract results with adjusted p-value threshold (alpha = 0.05)
res <- results(dds)
res_df <- as.data.frame(res)
View(res_df)
# Step 4: Gene Annotation
# Check available keytypes
keytypes(hgu133plus2.db)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
res_df_clean <- drop_na(res_df)
Step 5: Filter Significant Genes
sig_genes_df <- res_df  |>
dplyr::filter(padj < 0.05 & abs(log2FoldChange) > 1)
# Check number of significant genes
nrow(sig_genes_df)
# Step 6: Prepare ML Dataset
# Extract significant probe IDs and their corresponding gene symbols
sig_gene_probes <- rownames(sig_genes_df)
sig_gene_symbols <- sig_genes_df$symbol
# Subset count data to only significant genes
exprs_filtered <- counts_data[sig_gene_probes, , drop = FALSE]
# Replace probe IDs with gene symbols for the dataset column names
rownames(exprs_filtered) <- sig_gene_symbols
exprs_filtered <- exprs_filtered[complete.cases(exprs_filtered), ]
# Transpose expression data: samples as rows, genes as columns
ml_dataset <- as.data.frame(t(exprs_filtered))
# Add class labels (conditions) for ML
ml_dataset$Outcome <- col_data$condition
names(ml_dataset)
View(ml_dataset)
res <- results(dds)
res_df <- as.data.frame(res)
View(res_df)
res_df <- drop_na(res_df)
View(res_df)
# Step 4: Gene Annotation
# Check available keytypes
keytypes(hgu133plus2.db)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
# Remove missing genes
res_df <- drop_na(res_df)
sig_genes_df <- res_df  |>
dplyr::filter(pvalue < 0.05)
View(sig_genes_df)
head(sig_genes_df)
# Extract results with adjusted p-value threshold (alpha = 0.05)
res <- results(dds)
res_df <- as.data.frame(res)
# Step 4: Gene Annotation
# Check available keytypes
keytypes(hgu133plus2.db)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
top25_downregulated <- sig_genes_df  |>
filter(!is.na(padj), padj < 0.05) |>
arrange(log2FoldChange)  |>
slice(1:25)
top25_downregulated <- res_df  |>
filter(!is.na(padj), padj < 0.05) |>
arrange(log2FoldChange)  |>
slice(1:25)
# Step 5: Filter Significant Genes
# Filter genes with adjusted p-value < 0.05 and absolute log2FC > 1
top25_downregulated <- res_df  |>
filter(!is.na(padj), padj < 0.05) |>
arrange(log2FoldChange)  |>
slice(1:25)
# Extract results with adjusted p-value threshold (alpha = 0.05)
res <- results(dds)
res_df <- as.data.frame(res)
# Step 4: Gene Annotation
# Check available keytypes
keytypes(hgu133plus2.db)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
# Step 5: Filter Significant Genes
# Filter genes with adjusted p-value < 0.05 and absolute log2FC > 1
top25_downregulated <- res_df  |>
filter(!is.na(padj), padj < 0.05) |>
arrange(log2FoldChange)  |>
slice(1:25)
top25_downregulated <- res_df %>%
filter(!is.na(padj), padj < 0.05) %>%
arrange(log2FoldChange) %>%
slice(1:25)
# Load required libraries
library(tidyverse)
library(DESeq2)         # For differential expression analysis
library(GEOquery)       # For fetching GEO datasets
library(org.Hs.eg.db)   # Annotation database for Homo sapiens
library(hgu133plus2.db) # Affymetrix probe annotation for hgu133plus2 arrays
library(tidyverse)      # For data manipulation
# Step 1: Download GEO Dataset
# Fetch GEO dataset (example accession: "GSE21942")
geo_data <- getGEO("GSE21942", GSEMatrix = TRUE, destdir = "./data")
geo_data
# Step 2: Extract Expression Data
# Extract count data (genes x samples)
counts_data <- exprs(geo_data[[1]])
# Extract sample metadata
col_data <- pData(geo_data[[1]])
col_data$condition <- c(rep("Control", 15), rep("MS", 14))
col_data$condition <- as.factor(col_data$condition)
# Verify that sample names match between count data and metadata
all(colnames(counts_data) == rownames(col_data))
# Step 3: DESeq2 Differential Expression Analysis
# Create DESeq2 dataset object
dds <- DESeqDataSetFromMatrix(
countData = round(counts_data),
colData = col_data,
design = ~ condition
)
# Pre-filtering: remove rows with low gene counts
keep <- rowSums(counts(dds)) >= 10
dds <- dds[rowSums(counts(dds)) >= 10]
# Set the factor level
dds$condition <- relevel(dds$condition, ref = "Control")
# Run DESeq2 pipeline
dds <- DESeq(dds)
# Set the factor level
dds$condition <- relevel(dds$condition, ref = "Control")
# Extract results with adjusted p-value threshold (alpha = 0.05)
res <- results(dds)
res_df <- as.data.frame(res)
View(res_df)
# Step 4: Gene Annotation
# Check available keytypes
keytypes(hgu133plus2.db)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
# Step 5: Filter Significant Genes
# Filter genes with adjusted p-value < 0.05 and absolute log2FC > 1
top25_downregulated <- res_df %>%
filter(!is.na(padj), padj < 0.05) %>%
arrange(log2FoldChange) %>%
slice(1:25)
top25_upregulated <- sig_genes_df  |>
filter(!is.na(padj), padj < 0.05)  |>
arrange(desc(log2FoldChange))  |>
slice(1:25)
# Check number of significant genes
nrow(sig_genes_df)
# Load required libraries
library(tidyverse)
library(DESeq2)         # For differential expression analysis
library(GEOquery)       # For fetching GEO datasets
library(org.Hs.eg.db)   # Annotation database for Homo sapiens
library(hgu133plus2.db) # Affymetrix probe annotation for hgu133plus2 arrays
library(tidyverse)      # For data manipulation
# Step 1: Download GEO Dataset
# Fetch GEO dataset (example accession: "GSE21942")
geo_data <- getGEO("GSE21942", GSEMatrix = TRUE, destdir = "./data")
geo_data
# Step 2: Extract Expression Data
# Extract count data (genes x samples)
counts_data <- exprs(geo_data[[1]])
# Extract sample metadata
col_data <- pData(geo_data[[1]])
col_data$condition <- c(rep("Control", 15), rep("MS", 14))
col_data$condition <- as.factor(col_data$condition)
# Verify that sample names match between count data and metadata
all(colnames(counts_data) == rownames(col_data))
# Step 3: DESeq2 Differential Expression Analysis
# Create DESeq2 dataset object
dds <- DESeqDataSetFromMatrix(
countData = round(counts_data),
colData = col_data,
design = ~ condition
)
# Pre-filtering: remove rows with low gene counts
keep <- rowSums(counts(dds)) >= 10
dds <- dds[rowSums(counts(dds)) >= 10]
# Set the factor level
dds$condition <- relevel(dds$condition, ref = "Control")
# Run DESeq2 pipeline
dds <- DESeq(dds)
# Extract results with adjusted p-value threshold (alpha = 0.05)
res <- results(dds)
res_df <- as.data.frame(res)
# Step 4: Gene Annotation
# Check available keytypes
keytypes(hgu133plus2.db)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
# Step 5: Filter Significant Genes
# Filter genes with adjusted p-value < 0.05 and absolute log2FC > 1
top25_downregulated <- res_df %>%
filter(!is.na(padj), padj < 0.05) %>%
arrange(log2FoldChange) %>%
slice(1:25)
top25_downregulated <- res_df %>%
dplyr::filter(!is.na(padj), padj < 0.05) %>%
dplyr::arrange(log2FoldChange) %>%
dplyr::slice(1:25)
View(top25_downregulated)
top25_upregulated <- sig_genes_df  |>
dplyr::filter(!is.na(padj), padj < 0.05)  |>
dplyr::arrange(desc(log2FoldChange))  |>
dplyr::slice(1:25)
top25_upregulated <- res_df  |>
dplyr::filter(!is.na(padj), padj < 0.05)  |>
dplyr::arrange(desc(log2FoldChange))  |>
dplyr::slice(1:25)
View(top25_downregulated)
top25_downregulated <- res_df  |>
dplyr::filter(!is.na(padj), !is.na(symbol), padj < 0.05)  |>
dplyr::arrange(log2FoldChange)  |>
dplyr::slice(1:25)
View(top25_downregulated)
top25_upregulated <- res_df  |>
dplyr::filter(!is.na(padj), !is.na(symbol), padj < 0.05)  |>
dplyr::arrange(desc(log2FoldChange))  |>
dplyr::slice(1:25)
View(top25_upregulated)
# Combined datasets
bind_rows()
# Combined datasets
combined_df <- bind_rows(top25_upregulated, top25_upregulated)
View(combined_df)
# Check number of significant genes
nrow(combined_df)
rownames(combined_df)
combined_df$symbol
# Step 6: Prepare ML Dataset
# Extract significant probe IDs and their corresponding gene symbols
sig_gene_probes <- rownames(combined_df)
sig_gene_symbols <- combined_df$symbol
# Subset count data to only significant genes
exprs_filtered <- counts_data[combined_df, , drop = FALSE]
exprs_filtered <- counts_data[combined_df, , drop = FALSE]
# Subset count data to only significant genes
exprs_filtered <- counts_data[rownames(combined_df), , drop = FALSE]
# Subset count data to only significant genes
exprs_filtered <- counts_data[combined_df$symbol, , drop = FALSE]
exprs_filtered <- counts_data[combined_df, , drop = FALSE]
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
rscodeio::install_theme()
remotes::install_github("anthonynorth/rscodeio")
remotes::install_github("anthonynorth/rscodeio", force = T)
rscodeio::install_theme()
# Load required libraries
library(tidyverse)
library(DESeq2)         # For differential expression analysis
library(GEOquery)       # For fetching GEO datasets
library(org.Hs.eg.db)   # Annotation database for Homo sapiens
library(hgu133plus2.db) # Affymetrix probe annotation for hgu133plus2 arrays
library(tidyverse)      # For data manipulation
# Step 1: Download GEO Dataset
# Fetch GEO dataset (example accession: "GSE21942")
geo_data <- getGEO("GSE21942", GSEMatrix = TRUE, destdir = "./data")
geo_data
# Step 2: Extract Expression Data
# Extract count data (genes x samples)
counts_data <- exprs(geo_data[[1]])
# Extract sample metadata
col_data <- pData(geo_data[[1]])
col_data$condition <- c(rep("Control", 15), rep("MS", 14))
col_data$condition <- as.factor(col_data$condition)
# Verify that sample names match between count data and metadata
all(colnames(counts_data) == rownames(col_data))
# Step 3: DESeq2 Differential Expression Analysis
# Create DESeq2 dataset object
dds <- DESeqDataSetFromMatrix(
countData = round(counts_data),
colData = col_data,
design = ~ condition
)
# Pre-filtering: remove rows with low gene counts
keep <- rowSums(counts(dds)) >= 10
dds <- dds[rowSums(counts(dds)) >= 10]
# Set the factor level
dds$condition <- relevel(dds$condition, ref = "Control")
# Run DESeq2 pipeline
dds <- DESeq(dds)
# Extract results
res <- results(dds)
res_df <- as.data.frame(res)
# Step 4: Gene Annotation
# Check available keytypes
keytypes(hgu133plus2.db)
res_df$symbol <- mapIds(
hgu133plus2.db,
keys = rownames(res_df),
keytype = "PROBEID",
column = "SYMBOL"
)
top25_downregulated <- res_df  |>
dplyr::filter(!is.na(padj), !is.na(symbol), padj < 0.05)  |>
dplyr::arrange(log2FoldChange)  |>
dplyr::slice(1:25)
top25_upregulated <- res_df  |>
dplyr::filter(!is.na(padj), !is.na(symbol), padj < 0.05)  |>
dplyr::arrange(desc(log2FoldChange))  |>
dplyr::slice(1:25)
# Combined datasets
combined_df <- bind_rows(top25_upregulated, top25_upregulated)
View(combined_df)
nrow(combined_df)
rownames(combined_df)
# Step 6: Prepare ML Dataset
# Extract significant probe IDs and their corresponding gene symbols
sig_gene_probes <- rownames(combined_df)
combined_df$symbol
# Step 6: Prepare ML Dataset
# Extract significant probe IDs and their corresponding gene symbols
probes_id <- rownames(combined_df)
gene_symbols <- combined_df$symbol
# Subset count data to only significant genes
exprs_filtered <- counts_data[combined_df, , drop = FALSE]
# Subset count data to only significant genes
exprs_filtered <- counts_data[rownames(combined_df), , drop = FALSE]
# Step 6: Prepare ML Dataset
# Subset count data to only significant genes
exprs_filtered <- counts_data[rownames(combined_df), , drop = FALSE]
sum(rownames(combined_df) %in% rownames(counts_data))
# Combined datasets
combined_df <- bind_rows(top25_upregulated, top25_downregulated)
# Check number of significant genes
nrow(combined_df)
# Step 6: Prepare ML Dataset
# Subset count data to only significant genes
# Extract probe IDs and their corresponding gene symbols
probes_id <- rownames(combined_df)
gene_symbols <- combined_df$symbol
probes_id
gene_symbols
# Subset count data
exprs_filtered <- counts_data[probes_id, , drop = FALSE]
View(exprs_filtered)
# Replace probe IDs with gene symbols for the dataset column names
rownames(exprs_filtered) <- sig_gene_symbols
# Replace probe IDs with gene symbols for the dataset column names
rownames(exprs_filtered) <- gene_symbols
View(exprs_filtered)
exprs_filtered <- exprs_filtered[complete.cases(exprs_filtered), ]
View(exprs_filtered)
# Transpose expression data: samples as rows, genes as columns
ml_dataset <- as.data.frame(t(exprs_filtered))
# Add class labels (conditions) for ML
ml_dataset$Outcome <- col_data$condition
View(ml_dataset)
names(ml_dataset)
write.csv(ml_dataset, "data/MS_GSE21942.csv", row.names = FALSE)
remotes::install_github("anthonynorth/rscodeio")
remotes::install_github("anthonynorth/rscodeio", force = T)
